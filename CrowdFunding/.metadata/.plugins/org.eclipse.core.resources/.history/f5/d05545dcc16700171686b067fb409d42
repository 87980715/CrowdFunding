package com.redhat.crowdfunding.dao;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;

import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;

/**
 * @author littleredhat
 */
public class CrowdFundingDaoImpl extends Contract implements CrowdFundingDao {

	protected CrowdFundingDaoImpl(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
			BigInteger gasLimit) {
		super(contractAddress, web3j, credentials, gasPrice, gasLimit);
	}

	/**
	 * 众筹数量
	 */
	public Future<Uint256> getFundCount() {
		Function function = new Function("getFundCount", Arrays.asList(),
				Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
				}));
		return executeCallSingleValueReturnAsync(function);
	}

	/**
	 * 众筹地址
	 */
	public Future<Utf8String> getFundAddr(BigInteger i) {
		Function function = new Function("getFundAddr", Arrays.asList(new Uint256(i)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}));
		return executeCallSingleValueReturnAsync(function);
	}

	/**
	 * 众筹信息 owner coin number
	 */
	public CompletableFuture<List<Type>> getFundInfo(String addr) {
		Function function = new Function("getFundInfo", Arrays.asList(new Utf8String(addr)),
				Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
				}, new TypeReference<Uint256>() {
				}, new TypeReference<Uint256>() {
				}));
		return executeCallMultipleValueReturnAsync(function);
	}

	/**
	 * 发起众筹
	 */
	public Future<TransactionReceipt> raiseFund(String owner) {
		Function function = new Function("raiseFund", Arrays.asList(new Utf8String(owner)),
				Arrays.<TypeReference<?>>asList());
		return executeTransactionAsync(function);
	}

	/**
	 * 发送金币
	 */
	public Future<TransactionReceipt> sendCoin(BigInteger coin) {
		Function function = new Function("sendCoin", Arrays.asList(new Uint256(coin)),
				Arrays.<TypeReference<?>>asList());
		return executeTransactionAsync(function);
	}
}
