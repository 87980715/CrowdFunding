package com.redhat.crowdfunding.pool;

/**
 * @author littleredhat
 */
public class CrowdFundingServicePool {
	package com.redhat.crowdchain.handler;

	import org.apache.commons.pool2.BasePooledObjectFactory;
	import org.apache.commons.pool2.PooledObject;
	import org.apache.commons.pool2.impl.DefaultPooledObject;
	import org.apache.commons.pool2.impl.GenericObjectPool;
	import org.apache.commons.pool2.impl.GenericObjectPoolConfig;

	/**
	 * @author littleredhat
	 */
	public class RegisterServicePool extends BasePooledObjectFactory<RegisterService> {
		// registerService
		private static GenericObjectPool<RegisterService> pool = null;
		// 连接池最大空闲连接数
		private final static int MAXIDLE = 8;
		// 连接池最大总连接数
		private final static int MAXTOTAL = 8;
		// 连接池最小空闲连接数
		private final static int MINIDEL = 3;

		/**
		 * 获取对象池工厂实例
		 * 
		 * @return
		 */
		public synchronized static GenericObjectPool<RegisterService> getInstance() {
			if (pool == null) {
				GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();
				poolConfig.setMaxIdle(MAXIDLE); // 连接池最大空闲连接数
				poolConfig.setMaxTotal(MAXTOTAL); // 连接池最大总连接数
				poolConfig.setMinIdle(MINIDEL); // 连接池最小空闲连接数
				poolConfig.setTestOnBorrow(true); // 获取连接时检查连接的可用性
				poolConfig.setTestOnReturn(true); // 归还连接时检查连接的可用性
				pool = new GenericObjectPool<RegisterService>(new RegisterServicePool(), poolConfig);
			}
			return pool;
		}

		/**
		 * 获取对象
		 * 
		 * @return
		 */
		public static RegisterService borrowObject() {
			try {
				return RegisterServicePool.getInstance().borrowObject();
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}

		/**
		 * 归还对象
		 * 
		 * @param obj
		 */
		public static void returnObject(RegisterService obj) {
			RegisterServicePool.getInstance().returnObject(obj);
		}

		/**
		 * 关闭对象池
		 */
		public synchronized static void close() {
			if (pool != null && !pool.isClosed()) {
				pool.close();
				pool = null;
			}
		}

		@Override
		public RegisterService create() throws Exception {
			return new RegisterService();
		}

		@Override
		public PooledObject<RegisterService> wrap(RegisterService arg0) {
			return new DefaultPooledObject<RegisterService>(arg0);
		}
	}
}
